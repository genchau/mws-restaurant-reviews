const VERSION="v1",RR_CACHE={name:"rr-static-v1",static:["/","/index.html","/restaurant.html","/favicon.ico","/favicon-32x32.png","/favicon-16x16.png","/css/style.min.css","/js/app.min.js","/js/home.min.js","/js/restaurant.min.js","/data/restaurants.json","/images/placeholder.png","/images/1-small.jpg","/images/1-medium.jpg","/images/1-large.jpg","/images/2-small.jpg","/images/2-medium.jpg","/images/2-large.jpg","/images/3-small.jpg","/images/3-medium.jpg","/images/3-large.jpg","/images/4-small.jpg","/images/4-medium.jpg","/images/4-large.jpg","/images/5-small.jpg","/images/5-medium.jpg","/images/5-large.jpg","/images/6-small.jpg","/images/6-medium.jpg","/images/6-large.jpg","/images/7-small.jpg","/images/7-medium.jpg","/images/7-large.jpg","/images/8-small.jpg","/images/8-medium.jpg","/images/8-large.jpg","/images/9-small.jpg","/images/9-medium.jpg","/images/9-large.jpg","/images/10-small.jpg","/images/10-medium.jpg","/images/10-large.jpg","https://fonts.googleapis.com/css?family=Montserrat|Noto+Sans|Roboto+Slab"]},MAP_CACHE={name:"rr-maps-v1",whitelist:["https://maps.googleapis.com/maps-api-v3/api/js/33/1/common.js","https://maps.googleapis.com/maps-api-v3/api/js/33/1/util.js","https://maps.googleapis.com/maps-api-v3/api/js/33/1/map.js","https://maps.googleapis.com/maps-api-v3/api/js/33/1/marker.js","https://maps.googleapis.com/maps-api-v3/api/js/33/1/onion.js","https://maps.gstatic.com/mapfiles/transparent.png","https://maps.gstatic.com/mapfiles/"]},trimCache=(e,a)=>{caches.open(e).then(s=>s.keys().then(m=>{m.length>a&&(console.log("Removing",m[0].url,"from",m),s.delete(m[0]).then(trimCache(e,a)))}))},cacheThenNetwork=(e,a,{ignoreSearch:s,trim:m})=>caches.open(e).then(i=>i.match(a.url,{ignoreSearch:s}).then(s=>s||fetch(a).then(s=>(m&&m>0&&(trimCache(e,m),i.put(a,s.clone())),s)).catch(e=>{console.log("Unable to retrive from network",a.url)})));self.addEventListener("install",e=>{e.waitUntil(caches.open(RR_CACHE.name).then(e=>e.addAll(RR_CACHE.static)))}),self.addEventListener("activate",e=>(e.waitUntil(caches.keys().then(e=>Promise.all(e.filter(e=>e!==RR_CACHE.name&&e!==MAP_CACHE.name).map(e=>caches.delete(e))))),self.clients.claim())),self.addEventListener("fetch",e=>{let a=RR_CACHE.name;const s={ignoreSearch:!1,trim:0};MAP_CACHE.whitelist.includes(e.request.url)?(a=MAP_CACHE.name,s.trim=5):e.request.url.includes("/restaurant.html")&&(s.ignoreSearch=!0),e.respondWith(cacheThenNetwork(a,e.request,s))});