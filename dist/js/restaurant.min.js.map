{"version":3,"sources":["webpack:///./src/js/utils/Map.js","webpack:///./src/js/controllers/RestaurantController.js"],"names":["Map","mount","options","_classCallCheck","this","_options","Object","assign","zoom","center","lat","lng","disableDefaultUI","scrollwheel","element","document","getElementById","_googleMap","google","maps","markers","lastMarker","data","onClick","_this","bounds","LatLngBounds","map","item","marker","addMarkerWithInfoWindow","extend","position","length","GoogleMap","fitBounds","setZoom","_ref","content","Marker","animation","Animation","DROP","_this2","addMarker","infoWindow","InfoWindow","wrapper","createElement","className","appendChild","setContent","addListener","close","panTo","getPosition","panBy","forEach","i","setMap","event","clearInstanceListeners","__webpack_exports__","self","initMap","RestaurantController","loadMap","restaurant","pageElements","breadcrumbs","querySelector","restaurantContainer","restaurantName","restaurantCuisine","restaurantHoursToday","restaurantAddress","restaurantNeighborhood","restaurantStarRating","restaurantHoursContainer","restaurantImageContainer","reviewsContainer","render","restaurantId","_utils__WEBPACK_IMPORTED_MODULE_2__","_utils_DBHelper__WEBPACK_IMPORTED_MODULE_0__","fetchRestaurant","then","title","concat","name","fillBreadcrumb","renderRestaurant","console","error","catch","generateImage","populateHeader","generateAverageRating","populateAddress","populateDetails","renderReviews","_this$pageElements","_this$restaurant","cuisine","cuisine_type","operatingHours","operating_hours","daysOfTheWeek","keys","todayNum","Date","getDay","currentDay","textContent","_this$restaurant2","id","altText","loadingIndicator","src","restaurantImgUrl","size","sizes","alt","image","parentNode","removeChild","reviews","link","setAttribute","_this$pageElements2","_this$restaurant3","address","neighborhood","docFrag","createDocumentFragment","table","tr","thead","thead_tr","cloneNode","tbody","tbody_tr","th","td","day","day_th","day_td","innerHTML","includes","replace","generateHoursHtml","paragraph","reviewsList","review","li","div","p","reviewTop","reviewBody","username","starRating","date","comment","rating","comments","generateReviewHtml","classList","add","_utils_Map__WEBPACK_IMPORTED_MODULE_1__","latlng","updateMap"],"mappings":"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","file":"./js/restaurant.min.js","sourcesContent":["class Map {\n  constructor(mount, options) {\n    const defaultOptions = { \n      zoom: 12, \n      center: {\n        lat: 40.722216,\n        lng: -73.987501\n      }, \n      disableDefaultUI: true,\n      scrollwheel: false,\n    };\n    \n    this._options = Object.assign({}, defaultOptions, options);\n    this.element = mount || document.getElementById('map');\n\n    this._googleMap = new google.maps.Map(this.element, this._options);\n    this.markers = [];\n    this.lastMarker = null;\n  }\n\n  get GoogleMap() {\n    return this._googleMap;\n  }\n\n  addMarkers(data, onClick) {\n    let bounds = new google.maps.LatLngBounds();\n    this.markers = data.map(item => {\n      let marker = this.addMarkerWithInfoWindow(item, onClick);\n      bounds.extend(marker.position);\n\n      return marker;\n    });\n\n    // Fit the map to the boundaries of the markers\n    if (this.markers.length > 0) {\n      this.GoogleMap.fitBounds(bounds);\n      this.GoogleMap.setZoom(this._options.zoom);\n    }\n  }\n\n  addMarker({ position, content }) {\n    return new google.maps.Marker({\n      animation: google.maps.Animation.DROP,\n      map: this.GoogleMap,\n      position,\n      content,\n    });\n  }\n\n  addMarkerWithInfoWindow(item, onClick) {\n    // Create a new marker and define marker properties\n    const marker = this.addMarker(item);\n\n    // Create a new infowindow\n    const infoWindow = new google.maps.InfoWindow();\n    const wrapper = document.createElement('div');\n\n    wrapper.className = 'infoWindow';\n    wrapper.appendChild(marker.content);\n    infoWindow.setContent(wrapper);\n\n    marker.addListener('click', () => {\n      // Close the most recently opened infowindow\n      this.lastMarker && this.lastMarker.close();\n\n      // Reset the last clicked infowindow to this one\n      this.lastMarker = infoWindow;\n\n      // Pan the map to the center of the clicked marker\n      this.GoogleMap.panTo(marker.getPosition());\n\n      // Pan the map downward to accommodate the info window\n      this.GoogleMap.panBy(0, -150);\n\n      // Show the infowindow\n      onClick(infoWindow, marker);\n    });\n\n    return marker;\n  }\n\n  resetMarkers() {\n    this.markers.forEach((marker, i) => {\n      marker.setMap(null);\n      google.maps.event.clearInstanceListeners(marker);\n    });\n\n    this.markers = [];\n  }\n}\n\nexport default Map;\n","import DBHelper from '../utils/DBHelper';\nimport Map from '../utils/Map';\nimport {\n  lazyLoadImages,\n  loadGoogleMaps,\n  getUrlParameter,\n  makeImage,\n  makeStarRating\n} from '../utils';\n\n/**\n * Called when Google Maps API is ready\n * @global\n */\nself.initMap = () => {\n  RestaurantController.loadMap();\n};\n\n/**\n * Generates the HTML output for the operating hours table\n */\nconst generateHoursHtml = operatingHours => {\n  const docFrag = document.createDocumentFragment();\n  const table = document.createElement('table');\n  const tr = document.createElement('tr');\n  const thead = document.createElement('thead');\n  const thead_tr = tr.cloneNode();\n  const tbody = document.createElement('tbody');\n  const tbody_tr = tr.cloneNode();\n  const th = document.createElement('th');\n  const td = document.createElement('td');\n\n  table.className = 'restaurant__hours';\n\n  thead.appendChild(thead_tr);\n  tbody.appendChild(tbody_tr);\n\n  for (let day in operatingHours) {\n    let day_th = th.cloneNode();\n    let day_td = td.cloneNode();\n\n    day_th.textContent = day;\n    day_td.innerHTML = (operatingHours[day].includes(',') ? operatingHours[day].replace(', ', '<br>') : operatingHours[day]);\n    day_td.setAttribute('data-th', day);\n\n    thead_tr.appendChild(day_th);\n    tbody_tr.appendChild(day_td);\n  }\n\n  table.appendChild(thead);\n  table.appendChild(tbody);\n\n  docFrag.appendChild(table);\n  \n  return docFrag;\n};\n\n/**\n * Generates the HTML output for a review\n */\nconst generateReviewHtml = review => {\n  const li = document.createElement('li');\n  const div = document.createElement('div');\n  const p = document.createElement('p');\n  const reviewTop = div.cloneNode();\n  const reviewBody = div.cloneNode();\n  const username = p.cloneNode();\n  const starRating = div.cloneNode();\n  const date = p.cloneNode();\n  const comment = p.cloneNode();\n\n  li.className = 'restaurant__review';\n  reviewTop.className = 'review__top';\n  reviewBody.className = 'review__body';\n\n  // Review Top\n  username.textContent = review.name;\n  username.className = 'review__username';\n  reviewTop.appendChild(username);\n\n  starRating.className = 'star-rating';\n  starRating.setAttribute('aria-label', `User rating: ${review.rating}`);\n  starRating.appendChild(makeStarRating([review]));\n  reviewTop.appendChild(starRating);\n  \n  // Review Body\n  date.textContent = review.date;\n  date.className = 'review__date';\n  comment.innerHTML = review.comments;\n  comment.className = 'review__comment';\n  reviewBody.appendChild(date);\n  reviewBody.appendChild(comment);\n\n  li.appendChild(reviewTop);\n  li.appendChild(reviewBody);\n\n  return li;\n};\n\n/**\n * The restaurant page controller\n */\nconst RestaurantController = {\n  map: null,\n  restaurant: null,\n  pageElements: {\n    breadcrumbs: document.querySelector('.breadcrumbs__nav-list'),\n    restaurantContainer: document.querySelector('.restaurant'),\n    restaurantName: document.querySelector('.restaurant__name'),\n    restaurantCuisine: document.querySelector('.restaurant__cuisine'),\n    restaurantHoursToday: document.querySelector('.hours-today__text'),\n    restaurantAddress: document.querySelector('.restaurant__address'),\n    restaurantNeighborhood: document.querySelector('.restaurant__neighborhood'),\n    restaurantStarRating: document.querySelector('.restaurant__star-rating'),\n    restaurantHoursContainer: document.querySelector('.restaurant__hours-container'),\n    restaurantImageContainer: document.querySelector('.restaurant__image-container'),\n    reviewsContainer: document.querySelector('.restaurant__reviews-container'),\n  },\n\n  /**\n   * Page controller entry point to begin rendering page elements\n   */\n  render() {\n    const restaurantId = +getUrlParameter('id');\n\n    if (!restaurantId) {\n      console.error('The restaurant ID could not be located');\n      return;\n    }\n\n    DBHelper.fetchRestaurant(restaurantId)\n      .then(restaurant => {\n        if (!restaurant) {\n          console.error(`Unable to retrieve a restaurant with the ID ${restaurantId}`);\n          return;\n        }\n\n        loadGoogleMaps();\n        this.restaurant = restaurant;\n        document.title += ` | ${this.restaurant.name}`;\n\n        this.fillBreadcrumb();\n        this.renderRestaurant();\n      })\n      .catch(console.error);\n  },\n\n  /**\n   * Renders restaurant information\n   */\n  renderRestaurant() {\n    // Populate restaurant content\n    this.generateImage();\n    this.populateHeader();\n    this.generateAverageRating();\n    this.populateAddress();\n    this.populateDetails();\n    this.renderReviews();\n    lazyLoadImages();\n  },\n\n  /**\n   * Populates the restaurant header with content\n   */\n  populateHeader() {\n    const { restaurantName, restaurantCuisine, restaurantHoursToday } = this.pageElements;\n    const { name, cuisine_type: cuisine, operating_hours: operatingHours } = this.restaurant;\n    const daysOfTheWeek = Object.keys(operatingHours);\n    const todayNum = new Date().getDay();\n    const currentDay = daysOfTheWeek[todayNum > 0 ? todayNum - 1 : todayNum];\n    \n    restaurantName.textContent = name;\n    restaurantCuisine.textContent = cuisine;\n    restaurantHoursToday.textContent = operatingHours[currentDay];\n  },\n\n  /**\n   * Generates an IMG element for the current restaurant\n   */\n  generateImage() {\n    const { restaurantImageContainer } = this.pageElements;\n    const { id, altText } = this.restaurant;\n    const loadingIndicator = document.createElement('span');\n    \n    loadingIndicator.className = 'spinner';\n    restaurantImageContainer.appendChild(loadingIndicator);\n\n    restaurantImageContainer.appendChild(makeImage({\n      id,\n      src: DBHelper.restaurantImgUrl({id, size: 'small' }),\n      sizes: \"100vw\",\n      alt: altText,\n      className: 'restaurant__image',\n    }, image => {\n      loadingIndicator.parentNode && \n        loadingIndicator.parentNode.removeChild(loadingIndicator);\n      \n      restaurantImageContainer.appendChild(image);\n    }));\n  },\n\n  /**\n   * Generates the average star rating\n   */\n  generateAverageRating() {\n    const { restaurantStarRating } = this.pageElements;\n    const { reviews } = this.restaurant;\n    const link = document.createElement('a');\n\n    // Add stars\n    restaurantStarRating.appendChild(makeStarRating(reviews));\n\n    // Add link\n    link.setAttribute('href', '#reviews');\n    link.setAttribute('title', 'Skip to customer reviews');\n    link.className = 'star-rating__link';\n    link.textContent = `${reviews.length} reviews`;\n\n    restaurantStarRating.appendChild(link);\n  },\n\n  /**\n   * Populates the restaurant address and neighborhood\n   */\n  populateAddress() {\n    const { restaurantAddress, restaurantNeighborhood } = this.pageElements;\n    const { address, neighborhood } = this.restaurant;\n\n    restaurantAddress.textContent = address;\n    restaurantNeighborhood.textContent = neighborhood;\n  },\n\n  /**\n   * Populates restaurant details section\n   */\n  populateDetails() {\n    const { restaurantHoursContainer } = this.pageElements;\n    const { operating_hours: operatingHours } = this.restaurant;\n\n    restaurantHoursContainer.appendChild(generateHoursHtml(operatingHours));\n  },\n  \n  /**\n   * Renders reviews if there are any\n   */\n  renderReviews() {\n    const { reviews } = this.restaurant;\n    const { reviewsContainer } = this.pageElements;\n    const docFrag = document.createDocumentFragment();\n\n    if (!reviews) {\n      const paragraph = document.createElement('p');\n\n      paragraph.textContent = `${this.restaurant.name} does not have any reviews`;\n      paragraph.className = 'restaurant-reviews__empty';\n      reviewsContainer.appendChild(paragraph);\n\n      return;\n    }\n\n    const reviewsList = document.createElement('ul');\n    reviewsList.className = 'restaurant__reviews';\n\n    reviews.forEach(review => {\n      docFrag.appendChild(generateReviewHtml(review));\n    });\n\n    reviewsList.appendChild(docFrag);\n    reviewsContainer.appendChild(reviewsList);\n  },\n\n  /**\n   * Populates the page breadcrumbs\n   */\n  fillBreadcrumb() {\n    const { breadcrumbs } = this.pageElements;\n    const li = document.createElement('li');\n    \n    li.textContent = this.restaurant.name;\n    li.classList.add('breadcrumbs__nav-item');\n    li.setAttribute('aria-current', 'page');\n\n    breadcrumbs.appendChild(li);\n  },\n\n  /**\n   * Called by initMap once Google Maps API is ready.\n   * Create a new map and updates it\n   */\n  loadMap() {\n    this.map = new Map(null, {\n      zoom: 16,\n      center: this.restaurant.latlng,\n      scrollwheel: false,\n    }, () => {\n      document.querySelector('#map iframe').title = 'Restaurant Location';\n    });\n\n    this.restaurant && this.updateMap();\n  },\n\n  /**\n   * Updates the Google Map\n   */\n  updateMap() {\n    if (!this.map) {\n      return;\n    }\n\n    this.map.addMarker({\n      position: this.restaurant.latlng,\n      content: {}\n    });\n  }\n}\n\nexport default RestaurantController;\n"],"sourceRoot":""}