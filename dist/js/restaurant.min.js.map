{"version":3,"sources":["webpack:///./src/js/controllers/RestaurantController.js","webpack:///./src/js/utils/Map.js"],"names":["self","initMap","RestaurantController","loadMap","map","restaurant","pageElements","breadcrumbs","document","querySelector","restaurantContainer","restaurantName","restaurantCuisine","restaurantHoursToday","restaurantAddress","restaurantNeighborhood","restaurantStarRating","restaurantHoursContainer","restaurantImageContainer","reviewsContainer","render","_this","this","restaurantId","Object","_utils__WEBPACK_IMPORTED_MODULE_2__","_utils_DBHelper__WEBPACK_IMPORTED_MODULE_0__","fetchRestaurant","then","title","concat","name","fillBreadcrumb","renderRestaurant","catch","console","error","generateImage","populateHeader","generateAverageRating","populateAddress","populateDetails","renderReviews","_this$pageElements","_this$restaurant","cuisine","cuisine_type","operatingHours","operating_hours","daysOfTheWeek","keys","todayNum","Date","getDay","currentDay","textContent","_this$restaurant2","id","altText","loadingIndicator","createElement","className","appendChild","src","restaurantImgUrl","size","sizes","alt","image","parentNode","removeChild","_this$restaurant3","averageReview","reviews","link","setAttribute","length","_this$pageElements2","_this$restaurant4","address","neighborhood","docFrag","createDocumentFragment","table","tr","thead","thead_tr","cloneNode","tbody","tbody_tr","th","td","day","day_th","day_td","innerHTML","includes","replace","generateHoursHtml","paragraph","reviewsList","forEach","review","li","div","p","reviewTop","reviewBody","username","starRating","date","comment","rating","comments","generateReviewHtml","classList","add","_utils_Map__WEBPACK_IMPORTED_MODULE_1__","zoom","center","latlng","scrollwheel","updateMap","addMarker","position","content","__webpack_exports__","Map","mount","options","_classCallCheck","_options","assign","lat","lng","disableDefaultUI","element","getElementById","_googleMap","google","maps","markers","lastMarker","data","onClick","bounds","LatLngBounds","item","marker","addMarkerWithInfoWindow","extend","GoogleMap","fitBounds","setZoom","_ref","Marker","animation","Animation","DROP","_this2","infoWindow","InfoWindow","wrapper","setContent","addListener","close","panTo","getPosition","panBy","i","setMap","event","clearInstanceListeners"],"mappings":"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","file":"./js/restaurant.min.js","sourcesContent":["import DBHelper from '../utils/DBHelper';\nimport Map from '../utils/Map';\nimport {\n  lazyLoadImages,\n  loadGoogleMaps,\n  getUrlParameter,\n  makeImage,\n  makeStarRating\n} from '../utils';\n\n/**\n * Called when Google Maps API is ready\n * @global\n */\nself.initMap = () => {\n  RestaurantController.loadMap();\n};\n\n/**\n * Generates the HTML output for the operating hours table\n */\nconst generateHoursHtml = operatingHours => {\n  const docFrag = document.createDocumentFragment();\n  const table = document.createElement('table');\n  const tr = document.createElement('tr');\n  const thead = document.createElement('thead');\n  const thead_tr = tr.cloneNode();\n  const tbody = document.createElement('tbody');\n  const tbody_tr = tr.cloneNode();\n  const th = document.createElement('th');\n  const td = document.createElement('td');\n\n  table.className = 'restaurant__hours';\n\n  thead.appendChild(thead_tr);\n  tbody.appendChild(tbody_tr);\n\n  for (let day in operatingHours) {\n    let day_th = th.cloneNode();\n    let day_td = td.cloneNode();\n\n    day_th.textContent = day;\n    day_td.innerHTML = (operatingHours[day].includes(',') ? operatingHours[day].replace(', ', '<br>') : operatingHours[day]);\n    day_td.setAttribute('data-th', day);\n\n    thead_tr.appendChild(day_th);\n    tbody_tr.appendChild(day_td);\n  }\n\n  table.appendChild(thead);\n  table.appendChild(tbody);\n\n  docFrag.appendChild(table);\n  \n  return docFrag;\n};\n\n/**\n * Generates the HTML output for a review\n */\nconst generateReviewHtml = review => {\n  const li = document.createElement('li');\n  const div = document.createElement('div');\n  const p = document.createElement('p');\n  const reviewTop = div.cloneNode();\n  const reviewBody = div.cloneNode();\n  const username = p.cloneNode();\n  const starRating = div.cloneNode();\n  const date = p.cloneNode();\n  const comment = p.cloneNode();\n\n  li.className = 'restaurant__review';\n  reviewTop.className = 'review__top';\n  reviewBody.className = 'review__body';\n\n  // Review Top\n  username.textContent = review.name;\n  username.className = 'review__username';\n  reviewTop.appendChild(username);\n\n  starRating.className = 'star-rating';\n  starRating.setAttribute('aria-label', `User rating: ${review.rating}`);\n  starRating.appendChild(makeStarRating(review.rating / 5 * 100));\n  reviewTop.appendChild(starRating);\n  \n  // Review Body\n  date.textContent = review.date;\n  date.className = 'review__date';\n  comment.innerHTML = review.comments;\n  comment.className = 'review__comment';\n  reviewBody.appendChild(date);\n  reviewBody.appendChild(comment);\n\n  li.appendChild(reviewTop);\n  li.appendChild(reviewBody);\n\n  return li;\n};\n\n/**\n * The restaurant page controller\n */\nconst RestaurantController = {\n  map: null,\n  restaurant: null,\n  pageElements: {\n    breadcrumbs: document.querySelector('.breadcrumbs__nav-list'),\n    restaurantContainer: document.querySelector('.restaurant'),\n    restaurantName: document.querySelector('.restaurant__name'),\n    restaurantCuisine: document.querySelector('.restaurant__cuisine'),\n    restaurantHoursToday: document.querySelector('.hours-today__text'),\n    restaurantAddress: document.querySelector('.restaurant__address'),\n    restaurantNeighborhood: document.querySelector('.restaurant__neighborhood'),\n    restaurantStarRating: document.querySelector('.restaurant__star-rating'),\n    restaurantHoursContainer: document.querySelector('.restaurant__hours-container'),\n    restaurantImageContainer: document.querySelector('.restaurant__image-container'),\n    reviewsContainer: document.querySelector('.restaurant__reviews-container'),\n  },\n\n  /**\n   * Page controller entry point to begin rendering page elements\n   */\n  render() {\n    const restaurantId = +getUrlParameter('id');\n\n    if (!restaurantId) {\n      console.error('The restaurant ID could not be located');\n      return;\n    }\n\n    DBHelper.fetchRestaurant(restaurantId)\n      .then(restaurant => {\n        loadGoogleMaps();\n        this.restaurant = restaurant;\n        document.title += ` | ${this.restaurant.name}`;\n\n        this.fillBreadcrumb();\n        this.renderRestaurant();\n      })\n      .catch(console.error);\n  },\n\n  /**\n   * Renders restaurant information\n   */\n  renderRestaurant() {\n    // Populate restaurant content\n    this.generateImage();\n    this.populateHeader();\n    this.generateAverageRating();\n    this.populateAddress();\n    this.populateDetails();\n    this.renderReviews();\n    lazyLoadImages();\n  },\n\n  /**\n   * Populates the restaurant header with content\n   */\n  populateHeader() {\n    const { restaurantName, restaurantCuisine, restaurantHoursToday } = this.pageElements;\n    const { name, cuisine_type: cuisine, operating_hours: operatingHours } = this.restaurant;\n    const daysOfTheWeek = Object.keys(operatingHours);\n    const todayNum = new Date().getDay();\n    const currentDay = daysOfTheWeek[todayNum > 0 ? todayNum - 1 : todayNum];\n    \n    restaurantName.textContent = name;\n    restaurantCuisine.textContent = cuisine;\n    restaurantHoursToday.textContent = operatingHours[currentDay];\n  },\n\n  /**\n   * Generates an IMG element for the current restaurant\n   */\n  generateImage() {\n    const { restaurantImageContainer } = this.pageElements;\n    const { id, altText } = this.restaurant;\n    const loadingIndicator = document.createElement('span');\n    \n    loadingIndicator.className = 'spinner';\n    restaurantImageContainer.appendChild(loadingIndicator);\n\n    restaurantImageContainer.appendChild(makeImage({\n      id,\n      src: DBHelper.restaurantImgUrl({id, size: 'small' }),\n      sizes: \"100vw\",\n      alt: altText,\n      className: 'restaurant__image',\n    }, image => {\n      loadingIndicator.parentNode && \n        loadingIndicator.parentNode.removeChild(loadingIndicator);\n      \n      restaurantImageContainer.appendChild(image);\n    }));\n  },\n\n  /**\n   * Generates the average star rating\n   */\n  generateAverageRating() {\n    const { restaurantStarRating } = this.pageElements;\n    const { averageReview, reviews } = this.restaurant;\n    const link = document.createElement('a');\n\n    // Add stars\n    restaurantStarRating.appendChild(makeStarRating(averageReview));\n\n    // Add link\n    link.setAttribute('href', '#reviews');\n    link.setAttribute('title', 'Skip to customer reviews');\n    link.className = 'star-rating__link';\n    link.textContent = `${reviews.length} reviews`;\n\n    restaurantStarRating.appendChild(link);\n  },\n\n  /**\n   * Populates the restaurant address and neighborhood\n   */\n  populateAddress() {\n    const { restaurantAddress, restaurantNeighborhood } = this.pageElements;\n    const { address, neighborhood } = this.restaurant;\n\n    restaurantAddress.textContent = address;\n    restaurantNeighborhood.textContent = neighborhood;\n  },\n\n  /**\n   * Populates restaurant details section\n   */\n  populateDetails() {\n    const { restaurantHoursContainer } = this.pageElements;\n    const { operating_hours: operatingHours } = this.restaurant;\n\n    restaurantHoursContainer.appendChild(generateHoursHtml(operatingHours));\n  },\n  \n  /**\n   * Renders reviews if there are any\n   */\n  renderReviews() {\n    const { reviews } = this.restaurant;\n    const { reviewsContainer } = this.pageElements;\n    const docFrag = document.createDocumentFragment();\n\n    if (!reviews) {\n      const paragraph = document.createElement('p');\n\n      paragraph.textContent = `${this.restaurant.name} does not have any reviews`;\n      paragraph.className = 'restaurant-reviews__empty';\n      reviewsContainer.appendChild(paragraph);\n\n      return;\n    }\n\n    const reviewsList = document.createElement('ul');\n    reviewsList.className = 'restaurant__reviews';\n\n    reviews.forEach(review => {\n      docFrag.appendChild(generateReviewHtml(review));\n    });\n\n    reviewsList.appendChild(docFrag);\n    reviewsContainer.appendChild(reviewsList);\n  },\n\n  /**\n   * Populates the page breadcrumbs\n   */\n  fillBreadcrumb() {\n    const { breadcrumbs } = this.pageElements;\n    const li = document.createElement('li');\n    \n    li.textContent = this.restaurant.name;\n    li.classList.add('breadcrumbs__nav-item');\n    li.setAttribute('aria-current', 'page');\n\n    breadcrumbs.appendChild(li);\n  },\n\n  /**\n   * Called by initMap once Google Maps API is ready.\n   * Create a new map and updates it\n   */\n  loadMap() {\n    this.map = new Map(null, {\n      zoom: 16,\n      center: this.restaurant.latlng,\n      scrollwheel: false,\n    }, () => {\n      document.querySelector('#map iframe').title = 'Restaurant Location';\n    });\n\n    this.restaurant && this.updateMap();\n  },\n\n  /**\n   * Updates the Google Map\n   */\n  updateMap() {\n    if (!this.map) {\n      return;\n    }\n\n    this.map.addMarker({\n      position: this.restaurant.latlng,\n      content: {}\n    });\n  }\n}\n\nexport default RestaurantController;\n","class Map {\n  constructor(mount, options) {\n    const defaultOptions = { \n      zoom: 12, \n      center: {\n        lat: 40.722216,\n        lng: -73.987501\n      }, \n      disableDefaultUI: true,\n      scrollwheel: false,\n    };\n    \n    this._options = Object.assign({}, defaultOptions, options);\n    this.element = mount || document.getElementById('map');\n\n    this._googleMap = new google.maps.Map(this.element, this._options);\n    this.markers = [];\n    this.lastMarker = null;\n  }\n\n  get GoogleMap() {\n    return this._googleMap;\n  }\n\n  addMarkers(data, onClick) {\n    let bounds = new google.maps.LatLngBounds();\n    this.markers = data.map(item => {\n      let marker = this.addMarkerWithInfoWindow(item, onClick);\n      bounds.extend(marker.position);\n\n      return marker;\n    });\n\n    // Fit the map to the boundaries of the markers\n    if (this.markers.length > 0) {\n      this.GoogleMap.fitBounds(bounds);\n      this.GoogleMap.setZoom(this._options.zoom);\n    }\n  }\n\n  addMarker({ position, content }) {\n    return new google.maps.Marker({\n      animation: google.maps.Animation.DROP,\n      map: this.GoogleMap,\n      position,\n      content,\n    });\n  }\n\n  addMarkerWithInfoWindow(item, onClick) {\n    // Create a new marker and define marker properties\n    const marker = this.addMarker(item);\n\n    // Create a new infowindow\n    const infoWindow = new google.maps.InfoWindow();\n    const wrapper = document.createElement('div');\n\n    wrapper.className = 'infoWindow';\n    wrapper.appendChild(marker.content);\n    infoWindow.setContent(wrapper);\n\n    marker.addListener('click', () => {\n      // Close the most recently opened infowindow\n      this.lastMarker && this.lastMarker.close();\n\n      // Reset the last clicked infowindow to this one\n      this.lastMarker = infoWindow;\n\n      // Pan the map to the center of the clicked marker\n      this.GoogleMap.panTo(marker.getPosition());\n\n      // Pan the map downward to accommodate the info window\n      this.GoogleMap.panBy(0, -150);\n\n      // Show the infowindow\n      onClick(infoWindow, marker);\n    });\n\n    return marker;\n  }\n\n  resetMarkers() {\n    this.markers.forEach((marker, i) => {\n      marker.setMap(null);\n      google.maps.event.clearInstanceListeners(marker);\n    });\n\n    this.markers = [];\n  }\n}\n\nexport default Map;\n"],"sourceRoot":""}