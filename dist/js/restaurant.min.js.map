{"version":3,"sources":["webpack:///./src/js/utils/DBHelper.js","webpack:///./src/js/utils/loadGoogleMaps.js","webpack:///./src/js/utils/Map.js","webpack:///./src/js/utils/getUrlParameter.js","webpack:///./src/js/controllers/RestaurantController.js"],"names":["DBHelper","photograph","_ref","arguments","length","undefined","concat","this","BASE_URL","id","_ref2","fetch","DB_URL","then","response","ok","Error","json","results","restaurants","catch","console","error","fetchRestaurants","filter","r","restaurantId","fetchRestaurant","_ref3","reviews","Math","max","round","reduce","a","c","rating","toFixed","_config__WEBPACK_IMPORTED_MODULE_0__","HOST","PORT","__webpack_exports__","node","document","body","script","createElement","setAttribute","MAPS_KEY","appendChild","Map","mount","options","callback","_classCallCheck","_options","Object","assign","zoom","center","lat","lng","disableDefaultUI","scrollwheel","element","getElementById","_googleMap","google","maps","markers","lastMarker","event","addDomListenerOnce","window","data","onClick","_this","bounds","LatLngBounds","map","item","marker","addMarkerWithInfoWindow","extend","position","GoogleMap","fitBounds","setZoom","content","Marker","animation","Animation","DROP","_this2","addMarker","infoWindow","InfoWindow","addListener","close","panTo","getPosition","panBy","forEach","i","setMap","clearInstanceListeners","utils_getUrlParameter","param","URLSearchParams","location","search","get","replace","RegExp","exec","decodeURIComponent","self","initMap","RestaurantController","loadMap","generateStarsHtml","star","docFrag","createDocumentFragment","textContent","tmp","cloneNode","generateStarRatingHtml","div","container","top","bottom","className","style","width","restaurant","pageElements","breadcrumbs","querySelector","restaurantContainer","restaurantName","restaurantCuisine","restaurantHoursToday","restaurantAddress","restaurantNeighborhood","restaurantStarRating","restaurantHoursContainer","restaurantImageContainer","reviewsContainer","render","loadGoogleMaps","title","name","fillBreadcrumb","renderRestaurant","generateImage","populateHeader","generateAverageRating","populateAddress","populateDetails","renderReviews","_this$pageElements","_this$restaurant","cuisine","cuisine_type","operatingHours","operating_hours","currentDay","keys","Date","getDay","altText","image","src","restaurantImgUrl","alt","onload","acc","review","averageRating","link","_this$pageElements2","_this$restaurant2","address","neighborhood","table","tr","thead","thead_tr","tbody","tbody_tr","th","td","day","day_th","day_td","innerHTML","includes","generateHoursHtml","paragraph","reviewsList","li","p","reviewTop","reviewBody","username","starRating","date","comment","comments","generateReviewHtml","classList","add","latlng","updateMap"],"mappings":"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","file":"./js/restaurant.min.js","sourcesContent":["import config from '../config';\n\nclass DBHelper {\n  static get BASE_URL() {\n    return `${config.HOST}${config.PORT && `:${config.PORT}`}`;\n  }\n\n  static get DB_URL(){\n    return `./data/restaurants.json`;\n  }\n\n  static restaurantImgUrl({ photograph }, relative = true) {\n    return (relative)\n     ? `./images/${photograph}`\n     : `${this.BASE_URL}/images/${photograph}`;\n  }\n\n  static restaurantUrl({ id }, relative = true) {\n    return (relative)\n     ? `./restaurant.html?id=${id}`\n     : `${this.BASE_URL}/restaurant.html?id=${id}`;\n  }\n\n  static fetchRestaurants() {\n    return fetch(this.DB_URL)\n      .then(response => {\n        if(!response.ok) {\n          throw Error('Unable to retrieve restaurant data');\n        }\n        \n        return response.json();\n      })\n      .then(results => results.restaurants)\n      .catch(console.error);\n  }\n\n  static fetchRestaurant(id) {\n    return this.fetchRestaurants()\n      .then(restaurants => restaurants.filter(r => r.id === id)[0]);\n  }\n\n  static calculateAverageReview(restaurantId) {\n    return this.fetchRestaurant(restaurantId)\n      .then(({ reviews }) => {\n        if (!reviews) return 0;\n\n        // Stand back, we're going to try mathematics!\n        return Math.max(\n                Math.round(\n                  (reviews.reduce((a, c) => a + c.rating, 0) / reviews.length) * 10\n                ) / 10, 1\n              ).toFixed(1);\n      })\n      .catch(console.error);\n  }\n};\n\nexport default DBHelper;\n","import config from '../config';\n\n/**\n * Appends the Google Maps API script at the end of the document.body \n * or the specified node, if provided.\n * @param {HTMLElement} node \n */\nconst loadGoogleMaps = (node = document.body) => {\n  const script = document.createElement('script');\n\n  script.setAttribute('src', `https://maps.googleapis.com/maps/api/js?key=${config.MAPS_KEY}&libraries=places&callback=initMap`);\n  script.setAttribute('async', '');\n  script.setAttribute('defer', '');\n  node.appendChild(script);\n};\n\nexport default loadGoogleMaps;\n","class Map {\n  constructor(mount, options, callback) {\n    const defaultOptions = { \n      zoom: 12, \n      center: {\n        lat: 40.722216,\n        lng: -73.987501\n      }, \n      disableDefaultUI: true,\n      scrollwheel: false,\n    };\n    \n    this._options = Object.assign({}, defaultOptions, options);\n    this.element = mount || document.getElementById('map');\n\n    this._googleMap = new google.maps.Map(this.element, this._options);\n    this.markers = [];\n    this.lastMarker = null;\n\n    // Expose the ability to run a callback once map has loaded\n    if (callback) {\n      google.maps.event.addDomListenerOnce(window, 'load', callback);\n    }\n  }\n\n  get GoogleMap() {\n    return this._googleMap;\n  }\n\n  addMarkers(data, onClick) {\n    let bounds = new google.maps.LatLngBounds();\n    this.markers = data.map(item => {\n      let marker = this.addMarkerWithInfoWindow(item, onClick);\n      bounds.extend(marker.position);\n\n      return marker;\n    });\n\n    // Fit the map to the boundaries of the markers\n    if (this.markers.length > 0) {\n      this.GoogleMap.fitBounds(bounds);\n      this.GoogleMap.setZoom(this._options.zoom);\n    }\n  }\n\n  addMarker({ position, content }) {\n    return new google.maps.Marker({\n      animation: google.maps.Animation.DROP,\n      map: this.GoogleMap,\n      position,\n      content,\n    });\n  }\n\n  addMarkerWithInfoWindow(item, onClick) {\n    // Create a new marker and define marker properties\n    const marker = this.addMarker(item);\n\n    // Create a new infowindow\n    const infoWindow = new google.maps.InfoWindow();\n\n    marker.addListener('click', () => {\n      // Close the most recently opened infowindow\n      this.lastMarker && this.lastMarker.close();\n\n      // Reset the last clicked infowindow to this one\n      this.lastMarker = infoWindow;\n\n      // Pan the map to the center of the clicked marker\n      this.GoogleMap.panTo(marker.getPosition());\n\n      // Pan the map downward to accommodate the info window\n      this.GoogleMap.panBy(0, -150);\n\n      // Show the infowindow\n      onClick(infoWindow, marker);\n    });\n\n    return marker;\n  }\n\n  resetMarkers() {\n    this.markers.forEach((marker, i) => {\n      marker.setMap(null);\n      google.maps.event.clearInstanceListeners(marker);\n    });\n\n    this.markers = [];\n  }\n}\n\nexport default Map;\n","/**\n * Returns the value of the specified query string parameter \n * of the current URI.\n */\nconst getUrlParameter = param => {\n  if (!param) return;\n\n  // If URLSearchParams is supported, use that\n  if (URLSearchParams) {\n    const urlParams = new URLSearchParams(location.search);\n    return urlParams.get(param);\n  }\n\n  // Otherwise, parse the param using regular expressions\n  param = param.replace(/[\\[]/, '\\\\[').replace(/[\\]]/, '\\\\]');\n  const regex = new RegExp(`[\\\\?&]${param}=([^&#]*)`);\n  const results = regex.exec(location.search);\n  return results === null ? '' : decodeURIComponent(results[1].replace(/\\+/g, ' '));\n};\n\nexport default getUrlParameter;\n","import config from '../config';\nimport DBHelper from '../utils/DBHelper';\nimport Map from '../utils/Map';\nimport loadGoogleMaps from '../utils/loadGoogleMaps';\nimport getUrlParameter from '../utils/getUrlParameter';\n\n/**\n * Called when Google Maps API is ready\n * @global\n */\nself.initMap = () => {\n  RestaurantController.loadMap();\n};\n\n/**\n * Calculates average rating percentage\n */\nconst averageRating = reviews => {\n  const TOP_RATING = 5;\n  const total = reviews.reduce((acc, review) => {\n    return acc + review.rating;\n  }, 0);\n\n  return (total / (reviews.length * TOP_RATING) * 100);\n};\n\n/**\n * Generates the HTML output for the operating hours table\n */\nconst generateHoursHtml = operatingHours => {\n  const docFrag = document.createDocumentFragment();\n  const table = document.createElement('table');\n  const tr = document.createElement('tr');\n  const thead = document.createElement('thead');\n  const thead_tr = tr.cloneNode();\n  const tbody = document.createElement('tbody');\n  const tbody_tr = tr.cloneNode();\n  const th = document.createElement('th');\n  const td = document.createElement('td');\n\n  table.className = 'restaurant__hours';\n\n  thead.appendChild(thead_tr);\n  tbody.appendChild(tbody_tr);\n\n  for (let day in operatingHours) {\n    let day_th = th.cloneNode();\n    let day_td = td.cloneNode();\n\n    day_th.textContent = day;\n    day_td.innerHTML = (operatingHours[day].includes(',') ? operatingHours[day].replace(', ', '<br>') : operatingHours[day]);\n    day_td.setAttribute('data-th', day);\n\n    thead_tr.appendChild(day_th);\n    tbody_tr.appendChild(day_td);\n  }\n\n  table.appendChild(thead);\n  table.appendChild(tbody);\n\n  docFrag.appendChild(table);\n  \n  return docFrag;\n};\n\n/**\n * Generates the stars used for the ratings\n */\nconst generateStarsHtml = () => {\n  const RATING_LIMIT = 5;\n  const star = document.createElement('span');\n  const docFrag = document.createDocumentFragment();\n\n  star.textContent = '★';\n  \n  for (let i=RATING_LIMIT; i>0; i--) {\n    let tmp = star.cloneNode(true);\n    docFrag.appendChild(tmp);\n  }\n\n  return docFrag;\n}\n\n/**\n * Generates the HTML output for a star rating\n */\nconst generateStarRatingHtml = rating => {\n  const div = document.createElement('div');\n\n  const container = div.cloneNode();\n  const top = div.cloneNode();\n  const bottom = div.cloneNode();\n\n  container.className = 'star-rating__container';\n\n  top.className = 'star-rating__top';\n  top.style.width = `${rating}%`;\n  top.appendChild(generateStarsHtml());\n  container.appendChild(top);\n\n  bottom.className = 'star-rating__bottom';\n  bottom.appendChild(generateStarsHtml());\n  container.appendChild(bottom);\n\n  return container;\n};\n\n/**\n * Generates the HTML output for a review\n */\nconst generateReviewHtml = review => {\n  const li = document.createElement('li');\n  const div = document.createElement('div');\n  const p = document.createElement('p');\n  const reviewTop = div.cloneNode();\n  const reviewBody = div.cloneNode();\n  const username = p.cloneNode();\n  const starRating = div.cloneNode();\n  const date = p.cloneNode();\n  const comment = p.cloneNode();\n\n  li.className = 'restaurant__review';\n  reviewTop.className = 'review__top';\n  reviewBody.className = 'review__body';\n\n  // Review Top\n  username.textContent = review.name;\n  username.className = 'review__username';\n  reviewTop.appendChild(username);\n\n  starRating.className = 'star-rating';\n  starRating.setAttribute('aria-label', `User rating: ${review.rating}`);\n  starRating.appendChild(generateStarRatingHtml((review.rating / 5) * 100));\n  reviewTop.appendChild(starRating);\n  \n  // Review Body\n  date.textContent = review.date;\n  date.className = 'review__date';\n  comment.innerHTML = review.comments;\n  comment.className = 'review__comment';\n  reviewBody.appendChild(date);\n  reviewBody.appendChild(comment);\n\n  li.appendChild(reviewTop);\n  li.appendChild(reviewBody);\n\n  return li;\n};\n\n/**\n * The restaurant page controller\n */\nconst RestaurantController = {\n  map: null,\n  restaurant: null,\n  pageElements: {\n    breadcrumbs: document.querySelector('.breadcrumbs__nav-list'),\n    restaurantContainer: document.querySelector('.restaurant'),\n    restaurantName: document.querySelector('.restaurant__name'),\n    restaurantCuisine: document.querySelector('.restaurant__cuisine'),\n    restaurantHoursToday: document.querySelector('.hours-today__text'),\n    restaurantAddress: document.querySelector('.restaurant__address'),\n    restaurantNeighborhood: document.querySelector('.restaurant__neighborhood'),\n    restaurantStarRating: document.querySelector('.restaurant__star-rating'),\n    restaurantHoursContainer: document.querySelector('.restaurant__hours-container'),\n    restaurantImageContainer: document.querySelector('.restaurant__image-container'),\n    reviewsContainer: document.querySelector('.restaurant__reviews-container'),\n  },\n\n  /**\n   * Page controller entry point to begin rendering page elements\n   */\n  render() {\n    const restaurantId = +getUrlParameter('id');\n\n    if (!restaurantId) {\n      console.error('The restaurant ID could not be located');\n      return;\n    }\n\n    DBHelper.fetchRestaurant(restaurantId)\n      .then(restaurant => {\n        if (!restaurant) {\n          console.error(`Unable to retrieve a restaurant with the ID ${restaurantId}`);\n          return;\n        }\n\n        loadGoogleMaps();\n        this.restaurant = restaurant;\n        document.title += ` | ${this.restaurant.name}`;\n\n        this.fillBreadcrumb();\n        this.renderRestaurant();\n      })\n      .catch(console.error);\n  },\n\n  /**\n   * Renders restaurant information\n   */\n  renderRestaurant() {\n    // Populate restaurant content\n    this.generateImage();\n    this.populateHeader();\n    this.generateAverageRating();\n    this.populateAddress();\n    this.populateDetails();\n    this.renderReviews();\n  },\n\n  /**\n   * Populates the restaurant header with content\n   */\n  populateHeader() {\n    const { restaurantName, restaurantCuisine, restaurantHoursToday } = this.pageElements;\n    const { name, cuisine_type: cuisine, operating_hours: operatingHours } = this.restaurant;\n    const daysOfTheWeek = Object.keys(operatingHours);\n    const currentDay = daysOfTheWeek[new Date().getDay() - 1];\n    \n    restaurantName.textContent = name;\n    restaurantCuisine.textContent = cuisine;\n    restaurantHoursToday.textContent = operatingHours[currentDay];\n  },\n\n  /**\n   * Generates an IMG element for the current restaurant\n   */\n  generateImage() {\n    const { restaurantImageContainer } = this.pageElements;\n    const { altText } = this.restaurant;\n    const image = document.createElement('img');\n\n    image.src = DBHelper.restaurantImgUrl(this.restaurant);\n    image.alt = altText;\n    image.className = 'restaurant__image';\n    image.onload = event => {\n      restaurantImageContainer.appendChild(image);\n    };\n  },\n\n  /**\n   * Generates the average star rating\n   */\n  generateAverageRating() {\n    const { restaurantStarRating } = this.pageElements;\n    const { reviews } = this.restaurant;\n    const rating = averageRating(reviews);\n    const link = document.createElement('a');\n\n    // Add stars\n    restaurantStarRating.appendChild(generateStarRatingHtml(rating));\n\n    // Add link\n    link.setAttribute('href', '#reviews');\n    link.setAttribute('title', 'Skip to customer reviews');\n    link.className = 'star-rating__link';\n    link.textContent = `${reviews.length} reviews`;\n\n    restaurantStarRating.appendChild(link);\n  },\n\n  /**\n   * Populates the restaurant address and neighborhood\n   */\n  populateAddress() {\n    const { restaurantAddress, restaurantNeighborhood } = this.pageElements;\n    const { address, neighborhood } = this.restaurant;\n\n    restaurantAddress.textContent = address;\n    restaurantNeighborhood.textContent = neighborhood;\n  },\n\n  /**\n   * Populates restaurant details section\n   */\n  populateDetails() {\n    const { restaurantHoursContainer } = this.pageElements;\n    const { operating_hours: operatingHours } = this.restaurant;\n\n    restaurantHoursContainer.appendChild(generateHoursHtml(operatingHours));\n  },\n  \n  /**\n   * Renders reviews if there are any\n   */\n  renderReviews() {\n    const { reviews } = this.restaurant;\n    const { reviewsContainer } = this.pageElements;\n    const docFrag = document.createDocumentFragment();\n\n    if (!reviews) {\n      const paragraph = document.createElement('p');\n\n      paragraph.textContent = `${this.restaurant.name} does not have any reviews`;\n      paragraph.className = 'restaurant-reviews__empty';\n      reviewsContainer.appendChild(paragraph);\n\n      return;\n    }\n\n    const reviewsList = document.createElement('ul');\n    reviewsList.className = 'restaurant__reviews';\n\n    reviews.forEach(review => {\n      docFrag.appendChild(generateReviewHtml(review));\n    });\n\n    reviewsList.appendChild(docFrag);\n    reviewsContainer.appendChild(reviewsList);\n  },\n\n  /**\n   * Populates the page breadcrumbs\n   */\n  fillBreadcrumb() {\n    const { breadcrumbs } = this.pageElements;\n    const li = document.createElement('li');\n    \n    li.textContent = this.restaurant.name;\n    li.classList.add('breadcrumbs__nav-item');\n    li.setAttribute('aria-current', 'page');\n\n    breadcrumbs.appendChild(li);\n  },\n\n  /**\n   * Called by initMap once Google Maps API is ready.\n   * Create a new map and updates it\n   */\n  loadMap() {\n    this.map = new Map(null, {\n      zoom: 16,\n      center: this.restaurant.latlng,\n      scrollwheel: false,\n    }, () => {\n      // Add a title to the map iframe\n      const mapFrame = document.querySelector('.map iframe');\n      mapFrame.title = \"Restaurant Location\";\n    });\n\n    this.restaurant && this.updateMap();\n  },\n\n  /**\n   * Updates the Google Map\n   */\n  updateMap() {\n    if (!this.map) {\n      return;\n    }\n\n    this.map.addMarker({\n      position: this.restaurant.latlng,\n      content: {}\n    });\n  }\n}\n\nexport default RestaurantController;\n"],"sourceRoot":""}