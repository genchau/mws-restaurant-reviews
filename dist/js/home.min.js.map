{"version":3,"sources":["webpack:///./src/js/controllers/IndexController.js","webpack:///./src/js/utils/Map.js"],"names":["self","initMap","IndexController","loadMap","populateSelectBox","selectEl","values","docFrag","document","createDocumentFragment","optionEl","createElement","forEach","value","option","cloneNode","textContent","appendChild","createImage","_ref","className","id","altText","imageContainer","loadingIndicator","Object","_utils__WEBPACK_IMPORTED_MODULE_2__","src","_utils_DBHelper__WEBPACK_IMPORTED_MODULE_0__","restaurantImgUrl","size","sizes","alt","image","parentNode","removeChild","map","restaurants","pageElements","cuisineSelect","getElementById","filterForm","querySelector","neighborhoodSelect","restaurantsList","restaurantResultCount","render","_this","this","fetchRestaurants","then","_this$pageElements","mobileButtonBar","populateFilterForm","populateRestaurantsList","addEventListener","handleFilterUpdates","bind","catch","console","error","neighborhoods","Set","r","neighborhood","cuisines","cuisine_type","_this$pageElements2","event","_this2","_this$pageElements3","selectedIndex","cuisine","Error","filter","stopPropagation","_this$pageElements4","rCount","length","restaurant","avgReview","span","li","body","name","address","more","classList","add","averageReview","setAttribute","href","restaurantUrl","title","concat","append","resetRestaurants","innerHTML","updateMap","_this$pageElements5","markers","markerContent","link","position","latlng","content","resetMap","addMarkers","handleMapMarkerClick","infoWindow","marker","dataset","srcset","remove","open","_utils_Map__WEBPACK_IMPORTED_MODULE_1__","resetMarkers","__webpack_exports__","Map","mount","options","_classCallCheck","_options","assign","zoom","center","lat","lng","disableDefaultUI","scrollwheel","element","_googleMap","google","maps","lastMarker","data","onClick","bounds","LatLngBounds","item","addMarkerWithInfoWindow","extend","GoogleMap","fitBounds","setZoom","Marker","animation","Animation","DROP","addMarker","InfoWindow","wrapper","setContent","addListener","close","panTo","getPosition","panBy","i","setMap","clearInstanceListeners"],"mappings":"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","file":"./js/home.min.js","sourcesContent":["import DBHelper from '../utils/DBHelper';\nimport Map from '../utils/Map';\nimport {\n  lazyLoadImages,\n  loadGoogleMaps, \n  makeImage, \n  makeStarRating\n} from '../utils';\n\n/**\n * Unfortunately we have to attach this function to the global scope.\n * This is a limitation of Google Maps.\n */\nself.initMap = () => {\n  IndexController.loadMap();\n};\n\n/**\n * Utility function to populate a select box with values.\n */\nconst populateSelectBox = (selectEl, values) => {\n  // Create a document fragment and option element\n  const docFrag = document.createDocumentFragment();\n  const optionEl = document.createElement('option');\n\n  // Add an option for each value\n  values.forEach(value => {\n    // Clone the option element\n    let option = optionEl.cloneNode();\n\n    // Set the textContent and value\n    option.textContent = value;\n    option.value = value;\n\n    // Append the option to the document fragment\n    docFrag.appendChild(option);\n  });\n\n  // Append the document fragment to the select box\n  selectEl.appendChild(docFrag);\n};\n\n/**\n * Creates an image inside of a container\n * Displays a loading spinner before the image \n * has finished loading.\n */\nconst createImage = ({ id, altText }, className) => {\n  const imageContainer = document.createElement('div');\n  const loadingIndicator = document.createElement('span');\n\n  imageContainer.className = 'image__container';\n  loadingIndicator.className = 'spinner';\n  imageContainer.appendChild(loadingIndicator);\n  imageContainer.appendChild(makeImage({\n    id,\n    src: DBHelper.restaurantImgUrl({id, size: 'small' }),\n    sizes: \"100vw\",\n    alt: altText,\n    className\n  }, image => {\n    loadingIndicator.parentNode && \n      loadingIndicator.parentNode.removeChild(loadingIndicator);\n    \n    imageContainer.appendChild(image);\n  }));\n  \n  return imageContainer;\n};\n\n/**\n * Generates the html for one restaurant list item.\n */\nconst createRestaurant = restaurant => {\n  // Create the necessary elements for later\n  const span = document.createElement('span');\n  const li = document.createElement('li');\n  const body = document.createElement('div');\n  const name = document.createElement('h2');\n  const neighborhood = span.cloneNode();\n  const address = document.createElement('address');\n  const more = document.createElement('a');\n  let avgReview;\n\n  // Give the list item a class\n  li.classList.add('restaurants-list__item');\n\n  // Content body\n  body.className = 'restaurant-item__info';\n\n  // Restaurant title\n  name.textContent = restaurant.name;\n  name.className = 'restaurant-item__title';\n\n  // Restaurant neighborhood\n  neighborhood.textContent = restaurant.neighborhood;\n  neighborhood.className = 'restaurant-item__neighborhood';\n\n  // Restaurant address\n  address.className = 'restaurant-item___address';\n  address.textContent = restaurant.address;\n\n  // Average Review\n  avgReview = makeStarRating(restaurant.averageReview);\n  avgReview.setAttribute('aria-label', 'Average review');\n\n  // View More button\n  more.textContent = 'Details';\n  more.href = DBHelper.restaurantUrl(restaurant);\n  more.title = `View additional details about ${restaurant.name}`;\n  more.className = 'restaurant-item__detail-link';\n\n  // Append content to the body\n  body.append(name);\n  body.append(avgReview);\n  body.append(neighborhood);\n  body.append(address);\n  body.append(more);\n\n  li.append(createImage(restaurant, 'restaurant-item__image'));\n  li.append(body);\n\n  return li;\n};\n\nconst IndexController = {\n  map: null,\n  restaurants: null,\n  pageElements: {\n    cuisineSelect: document.getElementById('cuisine'),\n    filterForm: document.querySelector('.filters'),\n    neighborhoodSelect: document.getElementById('neighborhood'),\n    restaurantsList: document.querySelector('.restaurants-list'),\n    restaurantResultCount: document.querySelector('.restaurant-count'),\n  },\n  \n  render() {\n    loadGoogleMaps();\n\n    DBHelper.fetchRestaurants()\n      .then(restaurants => {\n        const { mobileButtonBar, filterForm } = this.pageElements;\n\n        // Save restaurants for later\n        this.restaurants = restaurants;\n\n        // Populate filters and display the restaurants\n        this.populateFilterForm();\n        this.populateRestaurantsList();\n\n        // Attach event listeners for the mobile view\n        filterForm.addEventListener('change', this.handleFilterUpdates.bind(this));\n      })\n      .catch(console.error);\n  },\n\n  populateFilterForm() {\n    const neighborhoods = [...new Set(this.restaurants.map(r => r.neighborhood))];\n    const cuisines = [...new Set(this.restaurants.map(r => r.cuisine_type))];\n    const { neighborhoodSelect, cuisineSelect } = this.pageElements;\n\n    populateSelectBox(neighborhoodSelect, neighborhoods);\n    populateSelectBox(cuisineSelect, cuisines);\n  },\n\n  handleFilterUpdates(event) {\n    const { neighborhoodSelect, cuisineSelect } = this.pageElements;\n    const neighborhood = neighborhoodSelect[neighborhoodSelect.selectedIndex].value;\n    const cuisine = cuisineSelect[cuisineSelect.selectedIndex].value;\n\n    DBHelper.fetchRestaurants()\n      .then(restaurants => {\n        if (!restaurants) throw Error('Restaurants could not be displayed');\n\n        restaurants = (cuisine !== 'all') ? \n          restaurants.filter(r => r.cuisine_type === cuisine) : \n          restaurants;\n        \n        restaurants = (neighborhood !== 'all') ?\n          restaurants.filter(r => r.neighborhood === neighborhood) :\n          restaurants;\n        \n        this.restaurants = restaurants;\n        this.populateRestaurantsList();\n      })\n      .catch(console.error);\n    \n    event.stopPropagation();\n  },\n\n  populateRestaurantsList() {\n    if (this.restaurants) {\n      const { restaurantsList, restaurantResultCount } = this.pageElements;\n      const docFrag = document.createDocumentFragment();\n      const rCount = this.restaurants.length;\n\n      this.restaurants.forEach(r => {\n        docFrag.appendChild(createRestaurant(r));\n      });\n\n      this.resetRestaurants();\n\n      restaurantsList.appendChild(docFrag);\n      restaurantResultCount.innerHTML = `\n        Displaying <span class=\"restaurant-count__text\">${rCount}</span> \n        restaurant${rCount === 1 ? '' : 's'}\n      `;\n\n      lazyLoadImages();\n      this.updateMap();\n    }\n  },\n\n  resetRestaurants() {\n    const { restaurantsList, restaurantResultCount } = this.pageElements;\n    restaurantsList.innerHTML = '';\n    restaurantResultCount.innerHTML = 'Displaying <span class=\"restaurant-count__text\">0</span> restaurants';\n  },\n\n  updateMap() {\n    if (!this.map) {\n      return;\n    }\n\n    const markers = this.restaurants.map(r => {\n      const markerContent = document.createDocumentFragment();\n      const image = createImage(r, 'infoWindow__image');\n      const title = document.createElement('h2');\n      const address = document.createElement('address');\n      const link = document.createElement('a');\n\n      // Image\n      markerContent.appendChild(image);\n\n      // Title\n      title.className = 'infoWindow__title';\n      title.textContent = r.name;\n      markerContent.appendChild(title);\n\n      // Address\n      address.className = 'infoWindow__address';\n      address.textContent = r.address;\n      markerContent.appendChild(address);\n\n      // Link\n      link.className = 'infoWindow__link';\n      link.textContent = 'View Details';\n      link.setAttribute('href', DBHelper.restaurantUrl(r));\n      link.setAttribute('title', `View more information about ${r.name}`);\n      markerContent.appendChild(link);\n\n      return {\n        position: r.latlng,\n        content: markerContent\n      };\n    });\n\n    this.resetMap();\n    this.map.addMarkers(markers, this.handleMapMarkerClick);\n  },\n\n  handleMapMarkerClick(infoWindow, marker) {\n    const image = infoWindow.content.querySelector('img.lazy');\n    image.src = image.dataset.src;\n    image.srcset = image.dataset.srcset;\n    image.classList.remove('lazy');\n\n    infoWindow.open(marker.map, marker);\n  },\n\n  loadMap() {\n    this.map = new Map();\n    this.restaurants && this.updateMap();\n  },\n\n  resetMap() {\n    this.map && this.map.resetMarkers();\n  }\n};\n\nexport default IndexController;\n","class Map {\n  constructor(mount, options) {\n    const defaultOptions = { \n      zoom: 12, \n      center: {\n        lat: 40.722216,\n        lng: -73.987501\n      }, \n      disableDefaultUI: true,\n      scrollwheel: false,\n    };\n    \n    this._options = Object.assign({}, defaultOptions, options);\n    this.element = mount || document.getElementById('map');\n\n    this._googleMap = new google.maps.Map(this.element, this._options);\n    this.markers = [];\n    this.lastMarker = null;\n  }\n\n  get GoogleMap() {\n    return this._googleMap;\n  }\n\n  addMarkers(data, onClick) {\n    let bounds = new google.maps.LatLngBounds();\n    this.markers = data.map(item => {\n      let marker = this.addMarkerWithInfoWindow(item, onClick);\n      bounds.extend(marker.position);\n\n      return marker;\n    });\n\n    // Fit the map to the boundaries of the markers\n    if (this.markers.length > 0) {\n      this.GoogleMap.fitBounds(bounds);\n      this.GoogleMap.setZoom(this._options.zoom);\n    }\n  }\n\n  addMarker({ position, content }) {\n    return new google.maps.Marker({\n      animation: google.maps.Animation.DROP,\n      map: this.GoogleMap,\n      position,\n      content,\n    });\n  }\n\n  addMarkerWithInfoWindow(item, onClick) {\n    // Create a new marker and define marker properties\n    const marker = this.addMarker(item);\n\n    // Create a new infowindow\n    const infoWindow = new google.maps.InfoWindow();\n    const wrapper = document.createElement('div');\n\n    wrapper.className = 'infoWindow';\n    wrapper.appendChild(marker.content);\n    infoWindow.setContent(wrapper);\n\n    marker.addListener('click', () => {\n      // Close the most recently opened infowindow\n      this.lastMarker && this.lastMarker.close();\n\n      // Reset the last clicked infowindow to this one\n      this.lastMarker = infoWindow;\n\n      // Pan the map to the center of the clicked marker\n      this.GoogleMap.panTo(marker.getPosition());\n\n      // Pan the map downward to accommodate the info window\n      this.GoogleMap.panBy(0, -150);\n\n      // Show the infowindow\n      onClick(infoWindow, marker);\n    });\n\n    return marker;\n  }\n\n  resetMarkers() {\n    this.markers.forEach((marker, i) => {\n      marker.setMap(null);\n      google.maps.event.clearInstanceListeners(marker);\n    });\n\n    this.markers = [];\n  }\n}\n\nexport default Map;\n"],"sourceRoot":""}