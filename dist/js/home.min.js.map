{"version":3,"sources":["webpack:///./src/js/utils/Map.js","webpack:///./src/js/controllers/IndexController.js"],"names":["Map","mount","options","_classCallCheck","this","_options","Object","assign","zoom","center","lat","lng","disableDefaultUI","scrollwheel","element","document","getElementById","_googleMap","google","maps","markers","lastMarker","data","onClick","_this","bounds","LatLngBounds","map","item","marker","addMarkerWithInfoWindow","extend","position","length","GoogleMap","fitBounds","setZoom","_ref","content","Marker","animation","Animation","DROP","_this2","addMarker","infoWindow","InfoWindow","wrapper","createElement","className","appendChild","setContent","addListener","close","panTo","getPosition","panBy","forEach","i","setMap","event","clearInstanceListeners","__webpack_exports__","self","initMap","IndexController","loadMap","populateSelectBox","selectEl","values","docFrag","createDocumentFragment","optionEl","value","option","cloneNode","textContent","createImage","id","altText","imageContainer","loadingIndicator","_utils__WEBPACK_IMPORTED_MODULE_2__","src","_utils_DBHelper__WEBPACK_IMPORTED_MODULE_0__","restaurantImgUrl","size","sizes","alt","image","parentNode","removeChild","restaurants","pageElements","cuisineSelect","filterForm","querySelector","neighborhoodSelect","restaurantsList","restaurantResultCount","render","fetchRestaurants","then","Error","_this$pageElements","mobileButtonBar","populateFilterForm","populateRestaurantsList","addEventListener","handleFilterUpdates","bind","catch","console","error","neighborhoods","Set","r","neighborhood","cuisines","cuisine_type","_this$pageElements2","_this$pageElements3","selectedIndex","cuisine","filter","stopPropagation","_this$pageElements4","rCount","restaurant","avgReview","span","li","body","name","address","more","classList","add","reviews","setAttribute","href","restaurantUrl","title","concat","append","resetRestaurants","innerHTML","updateMap","_this$pageElements5","markerContent","link","latlng","resetMap","addMarkers","handleMapMarkerClick","dataset","srcset","remove","open","_utils_Map__WEBPACK_IMPORTED_MODULE_1__","resetMarkers"],"mappings":"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","file":"./js/home.min.js","sourcesContent":["class Map {\n  constructor(mount, options) {\n    const defaultOptions = { \n      zoom: 12, \n      center: {\n        lat: 40.722216,\n        lng: -73.987501\n      }, \n      disableDefaultUI: true,\n      scrollwheel: false,\n    };\n    \n    this._options = Object.assign({}, defaultOptions, options);\n    this.element = mount || document.getElementById('map');\n\n    this._googleMap = new google.maps.Map(this.element, this._options);\n    this.markers = [];\n    this.lastMarker = null;\n  }\n\n  get GoogleMap() {\n    return this._googleMap;\n  }\n\n  addMarkers(data, onClick) {\n    let bounds = new google.maps.LatLngBounds();\n    this.markers = data.map(item => {\n      let marker = this.addMarkerWithInfoWindow(item, onClick);\n      bounds.extend(marker.position);\n\n      return marker;\n    });\n\n    // Fit the map to the boundaries of the markers\n    if (this.markers.length > 0) {\n      this.GoogleMap.fitBounds(bounds);\n      this.GoogleMap.setZoom(this._options.zoom);\n    }\n  }\n\n  addMarker({ position, content }) {\n    return new google.maps.Marker({\n      animation: google.maps.Animation.DROP,\n      map: this.GoogleMap,\n      position,\n      content,\n    });\n  }\n\n  addMarkerWithInfoWindow(item, onClick) {\n    // Create a new marker and define marker properties\n    const marker = this.addMarker(item);\n\n    // Create a new infowindow\n    const infoWindow = new google.maps.InfoWindow();\n    const wrapper = document.createElement('div');\n\n    wrapper.className = 'infoWindow';\n    wrapper.appendChild(marker.content);\n    infoWindow.setContent(wrapper);\n\n    marker.addListener('click', () => {\n      // Close the most recently opened infowindow\n      this.lastMarker && this.lastMarker.close();\n\n      // Reset the last clicked infowindow to this one\n      this.lastMarker = infoWindow;\n\n      // Pan the map to the center of the clicked marker\n      this.GoogleMap.panTo(marker.getPosition());\n\n      // Pan the map downward to accommodate the info window\n      this.GoogleMap.panBy(0, -150);\n\n      // Show the infowindow\n      onClick(infoWindow, marker);\n    });\n\n    return marker;\n  }\n\n  resetMarkers() {\n    this.markers.forEach((marker, i) => {\n      marker.setMap(null);\n      google.maps.event.clearInstanceListeners(marker);\n    });\n\n    this.markers = [];\n  }\n}\n\nexport default Map;\n","import DBHelper from '../utils/DBHelper';\nimport Map from '../utils/Map';\nimport {\n  lazyLoadImages,\n  loadGoogleMaps, \n  makeImage, \n  makeStarRating\n} from '../utils';\n\n/**\n * Unfortunately we have to attach this function to the global scope.\n * This is a limitation of Google Maps.\n */\nself.initMap = () => {\n  IndexController.loadMap();\n};\n\n/**\n * Utility function to populate a select box with values.\n */\nconst populateSelectBox = (selectEl, values) => {\n  // Create a document fragment and option element\n  const docFrag = document.createDocumentFragment();\n  const optionEl = document.createElement('option');\n\n  // Add an option for each value\n  values.forEach(value => {\n    // Clone the option element\n    let option = optionEl.cloneNode();\n\n    // Set the textContent and value\n    option.textContent = value;\n    option.value = value;\n\n    // Append the option to the document fragment\n    docFrag.appendChild(option);\n  });\n\n  // Append the document fragment to the select box\n  selectEl.appendChild(docFrag);\n};\n\n/**\n * Creates an image inside of a container\n * Displays a loading spinner before the image \n * has finished loading.\n */\nconst createImage = ({ id, altText }, className) => {\n  const imageContainer = document.createElement('div');\n  const loadingIndicator = document.createElement('span');\n\n  imageContainer.className = 'image__container';\n  loadingIndicator.className = 'spinner';\n  imageContainer.appendChild(loadingIndicator);\n  imageContainer.appendChild(makeImage({\n    id,\n    src: DBHelper.restaurantImgUrl({id, size: 'small' }),\n    sizes: \"100vw\",\n    alt: altText,\n    className\n  }, image => {\n    loadingIndicator.parentNode && \n      loadingIndicator.parentNode.removeChild(loadingIndicator);\n    \n    imageContainer.appendChild(image);\n  }));\n  \n  return imageContainer;\n};\n\n/**\n * Generates the html for one restaurant list item.\n */\nconst createRestaurant = restaurant => {\n  // Create the necessary elements for later\n  const span = document.createElement('span');\n  const li = document.createElement('li');\n  const body = document.createElement('div');\n  const name = document.createElement('h2');\n  const neighborhood = span.cloneNode();\n  const address = document.createElement('address');\n  const more = document.createElement('a');\n  let avgReview;\n\n  // Give the list item a class\n  li.classList.add('restaurants-list__item');\n\n  // Content body\n  body.className = 'restaurant-item__info';\n\n  // Restaurant title\n  name.textContent = restaurant.name;\n  name.className = 'restaurant-item__title';\n\n  // Restaurant neighborhood\n  neighborhood.textContent = restaurant.neighborhood;\n  neighborhood.className = 'restaurant-item__neighborhood';\n\n  // Restaurant address\n  address.className = 'restaurant-item___address';\n  address.textContent = restaurant.address;\n\n  // Average Review\n  // avgReview.className = 'restaurant-item__review';\n  avgReview = makeStarRating(restaurant.reviews);\n  avgReview.setAttribute('aria-label', 'Average review');\n\n  // View More button\n  more.textContent = 'Details';\n  more.href = DBHelper.restaurantUrl(restaurant);\n  more.title = `View additional details about ${restaurant.name}`;\n  more.className = 'restaurant-item__detail-link';\n\n  // Append content to the body\n  body.append(name);\n  body.append(avgReview);\n  body.append(neighborhood);\n  body.append(address);\n  body.append(more);\n\n  li.append(createImage(restaurant, 'restaurant-item__image'));\n  li.append(body);\n\n  return li;\n};\n\nconst IndexController = {\n  map: null,\n  restaurants: null,\n  pageElements: {\n    cuisineSelect: document.getElementById('cuisine'),\n    filterForm: document.querySelector('.filters'),\n    neighborhoodSelect: document.getElementById('neighborhood'),\n    restaurantsList: document.querySelector('.restaurants-list'),\n    restaurantResultCount: document.querySelector('.restaurant-count'),\n  },\n  \n  render() {\n    loadGoogleMaps();\n    \n    DBHelper.fetchRestaurants()\n      .then(restaurants => {\n        if (!restaurants) throw Error('Restaurants could not be displayed');\n\n        const { mobileButtonBar, filterForm } = this.pageElements;\n\n        // Save restaurants for later\n        this.restaurants = restaurants;\n\n        // Populate filters and display the restaurants\n        this.populateFilterForm();\n        this.populateRestaurantsList();\n\n        // Attach event listeners for the mobile view\n        filterForm.addEventListener('change', this.handleFilterUpdates.bind(this));\n      })\n      .catch(console.error);\n  },\n\n  populateFilterForm() {\n    const neighborhoods = [...new Set(this.restaurants.map(r => r.neighborhood))];\n    const cuisines = [...new Set(this.restaurants.map(r => r.cuisine_type))];\n    const { neighborhoodSelect, cuisineSelect } = this.pageElements;\n\n    populateSelectBox(neighborhoodSelect, neighborhoods);\n    populateSelectBox(cuisineSelect, cuisines);\n  },\n\n  handleFilterUpdates(event) {\n    const { neighborhoodSelect, cuisineSelect } = this.pageElements;\n    const neighborhood = neighborhoodSelect[neighborhoodSelect.selectedIndex].value;\n    const cuisine = cuisineSelect[cuisineSelect.selectedIndex].value;\n\n    DBHelper.fetchRestaurants()\n      .then(restaurants => {\n        if (!restaurants) throw Error('Restaurants could not be displayed');\n\n        restaurants = (cuisine !== 'all') ? \n          restaurants.filter(r => r.cuisine_type === cuisine) : \n          restaurants;\n        \n        restaurants = (neighborhood !== 'all') ?\n          restaurants.filter(r => r.neighborhood === neighborhood) :\n          restaurants;\n        \n        this.restaurants = restaurants;\n        this.populateRestaurantsList();\n      })\n      .catch(console.error);\n    \n    event.stopPropagation();\n  },\n\n  populateRestaurantsList() {\n    if (this.restaurants) {\n      const { restaurantsList, restaurantResultCount } = this.pageElements;\n      const docFrag = document.createDocumentFragment();\n      const rCount = this.restaurants.length;\n\n      this.restaurants.forEach(r => {\n        docFrag.appendChild(createRestaurant(r));\n      });\n\n      this.resetRestaurants();\n\n      restaurantsList.appendChild(docFrag);\n      restaurantResultCount.innerHTML = `\n        Displaying <span class=\"restaurant-count__text\">${rCount}</span> \n        restaurant${rCount === 1 ? '' : 's'}\n      `;\n\n      lazyLoadImages();\n      this.updateMap();\n    }\n  },\n\n  resetRestaurants() {\n    const { restaurantsList, restaurantResultCount } = this.pageElements;\n    restaurantsList.innerHTML = '';\n    restaurantResultCount.innerHTML = 'Displaying <span class=\"restaurant-count__text\">0</span> restaurants';\n  },\n\n  updateMap() {\n    if (!this.map) {\n      return;\n    }\n\n    const markers = this.restaurants.map(r => {\n      const markerContent = document.createDocumentFragment();\n      const image = createImage(r, 'infoWindow__image');\n      const title = document.createElement('h2');\n      const address = document.createElement('address');\n      const link = document.createElement('a');\n\n      // Image\n      markerContent.appendChild(image);\n\n      // Title\n      title.className = 'infoWindow__title';\n      title.textContent = r.name;\n      markerContent.appendChild(title);\n\n      // Address\n      address.className = 'infoWindow__address';\n      address.textContent = r.address;\n      markerContent.appendChild(address);\n\n      // Link\n      link.className = 'infoWindow__link';\n      link.textContent = 'View Details';\n      link.setAttribute('href', DBHelper.restaurantUrl(r));\n      link.setAttribute('title', `View more information about ${r.name}`);\n      markerContent.appendChild(link);\n\n      return {\n        position: r.latlng,\n        content: markerContent\n      };\n    });\n\n    this.resetMap();\n    this.map.addMarkers(markers, this.handleMapMarkerClick);\n  },\n\n  handleMapMarkerClick(infoWindow, marker) {\n    const image = infoWindow.content.querySelector('img.lazy');\n    image.src = image.dataset.src;\n    image.srcset = image.dataset.srcset;\n    image.classList.remove('lazy');\n\n    infoWindow.open(marker.map, marker);\n  },\n\n  loadMap() {\n    this.map = new Map();\n    this.restaurants && this.updateMap();\n  },\n\n  resetMap() {\n    this.map && this.map.resetMarkers();\n  }\n};\n\nexport default IndexController;\n"],"sourceRoot":""}