{"version":3,"sources":["webpack:///./src/js/utils/DBHelper.js","webpack:///./src/js/utils/loadGoogleMaps.js","webpack:///./src/js/utils/Map.js","webpack:///./src/js/controllers/IndexController.js"],"names":["DBHelper","photograph","_ref","arguments","length","undefined","concat","this","BASE_URL","id","_ref2","fetch","DB_URL","then","response","ok","Error","json","results","restaurants","catch","console","error","fetchRestaurants","filter","r","restaurantId","fetchRestaurant","_ref3","reviews","Math","max","round","reduce","a","c","rating","toFixed","_config__WEBPACK_IMPORTED_MODULE_0__","HOST","PORT","__webpack_exports__","node","document","body","script","createElement","setAttribute","MAPS_KEY","appendChild","Map","mount","options","callback","_classCallCheck","_options","Object","assign","zoom","center","lat","lng","disableDefaultUI","scrollwheel","element","getElementById","_googleMap","google","maps","markers","lastMarker","event","addDomListenerOnce","window","data","onClick","_this","bounds","LatLngBounds","map","item","marker","addMarkerWithInfoWindow","extend","position","GoogleMap","fitBounds","setZoom","content","Marker","animation","Animation","DROP","_this2","addMarker","infoWindow","InfoWindow","addListener","close","panTo","getPosition","panBy","forEach","i","setMap","clearInstanceListeners","self","initMap","IndexController","loadMap","populateSelectBox","selectEl","values","docFrag","createDocumentFragment","optionEl","value","option","cloneNode","textContent","pageElements","cuisineSelect","filterForm","querySelector","neighborhoodSelect","restaurantsList","restaurantResultCount","render","_utils_loadGoogleMaps__WEBPACK_IMPORTED_MODULE_3__","_utils_DBHelper__WEBPACK_IMPORTED_MODULE_1__","_this$pageElements","mobileButtonBar","populateFilterForm","populateRestaurantsList","addEventListener","handleFilterUpdates","bind","neighborhoods","Set","neighborhood","cuisines","cuisine_type","_this$pageElements2","_this$pageElements3","selectedIndex","cuisine","stopPropagation","_this$pageElements4","rCount","restaurant","span","li","image","name","address","more","avgReview","className","src","restaurantImgUrl","altText","calculateAverageReview","score","append","href","restaurantUrl","title","onload","classList","add","resetRestaurants","innerHTML","updateMap","_this$pageElements5","latlng","photo","url","resetMap","addMarkers","handleMapMarkerClick","_marker$content","setContent","open","_utils_Map__WEBPACK_IMPORTED_MODULE_2__","resetMarkers"],"mappings":"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","file":"./js/home.min.js","sourcesContent":["import config from '../config';\n\nclass DBHelper {\n  static get BASE_URL() {\n    return `${config.HOST}${config.PORT && `:${config.PORT}`}`;\n  }\n\n  static get DB_URL(){\n    return `./data/restaurants.json`;\n  }\n\n  static restaurantImgUrl({ photograph }, relative = true) {\n    return (relative)\n     ? `./images/${photograph}`\n     : `${this.BASE_URL}/images/${photograph}`;\n  }\n\n  static restaurantUrl({ id }, relative = true) {\n    return (relative)\n     ? `./restaurant.html?id=${id}`\n     : `${this.BASE_URL}/restaurant.html?id=${id}`;\n  }\n\n  static fetchRestaurants() {\n    return fetch(this.DB_URL)\n      .then(response => {\n        if(!response.ok) {\n          throw Error('Unable to retrieve restaurant data');\n        }\n        \n        return response.json();\n      })\n      .then(results => results.restaurants)\n      .catch(console.error);\n  }\n\n  static fetchRestaurant(id) {\n    return this.fetchRestaurants()\n      .then(restaurants => restaurants.filter(r => r.id === id)[0]);\n  }\n\n  static calculateAverageReview(restaurantId) {\n    return this.fetchRestaurant(restaurantId)\n      .then(({ reviews }) => {\n        if (!reviews) return 0;\n\n        // Stand back, we're going to try mathematics!\n        return Math.max(\n                Math.round(\n                  (reviews.reduce((a, c) => a + c.rating, 0) / reviews.length) * 10\n                ) / 10, 1\n              ).toFixed(1);\n      })\n      .catch(console.error);\n  }\n};\n\nexport default DBHelper;\n","import config from '../config';\n\n/**\n * Appends the Google Maps API script at the end of the document.body \n * or the specified node, if provided.\n * @param {HTMLElement} node \n */\nconst loadGoogleMaps = (node = document.body) => {\n  const script = document.createElement('script');\n\n  script.setAttribute('src', `https://maps.googleapis.com/maps/api/js?key=${config.MAPS_KEY}&libraries=places&callback=initMap`);\n  script.setAttribute('async', '');\n  script.setAttribute('defer', '');\n  node.appendChild(script);\n};\n\nexport default loadGoogleMaps;\n","class Map {\n  constructor(mount, options, callback) {\n    const defaultOptions = { \n      zoom: 12, \n      center: {\n        lat: 40.722216,\n        lng: -73.987501\n      }, \n      disableDefaultUI: true,\n      scrollwheel: false,\n    };\n    \n    this._options = Object.assign({}, defaultOptions, options);\n    this.element = mount || document.getElementById('map');\n\n    this._googleMap = new google.maps.Map(this.element, this._options);\n    this.markers = [];\n    this.lastMarker = null;\n\n    // Expose the ability to run a callback once map has loaded\n    if (callback) {\n      google.maps.event.addDomListenerOnce(window, 'load', callback);\n    }\n  }\n\n  get GoogleMap() {\n    return this._googleMap;\n  }\n\n  addMarkers(data, onClick) {\n    let bounds = new google.maps.LatLngBounds();\n    this.markers = data.map(item => {\n      let marker = this.addMarkerWithInfoWindow(item, onClick);\n      bounds.extend(marker.position);\n\n      return marker;\n    });\n\n    // Fit the map to the boundaries of the markers\n    if (this.markers.length > 0) {\n      this.GoogleMap.fitBounds(bounds);\n      this.GoogleMap.setZoom(this._options.zoom);\n    }\n  }\n\n  addMarker({ position, content }) {\n    return new google.maps.Marker({\n      animation: google.maps.Animation.DROP,\n      map: this.GoogleMap,\n      position,\n      content,\n    });\n  }\n\n  addMarkerWithInfoWindow(item, onClick) {\n    // Create a new marker and define marker properties\n    const marker = this.addMarker(item);\n\n    // Create a new infowindow\n    const infoWindow = new google.maps.InfoWindow();\n\n    marker.addListener('click', () => {\n      // Close the most recently opened infowindow\n      this.lastMarker && this.lastMarker.close();\n\n      // Reset the last clicked infowindow to this one\n      this.lastMarker = infoWindow;\n\n      // Pan the map to the center of the clicked marker\n      this.GoogleMap.panTo(marker.getPosition());\n\n      // Pan the map downward to accommodate the info window\n      this.GoogleMap.panBy(0, -150);\n\n      // Show the infowindow\n      onClick(infoWindow, marker);\n    });\n\n    return marker;\n  }\n\n  resetMarkers() {\n    this.markers.forEach((marker, i) => {\n      marker.setMap(null);\n      google.maps.event.clearInstanceListeners(marker);\n    });\n\n    this.markers = [];\n  }\n}\n\nexport default Map;\n","import config from '../config';\nimport DBHelper from '../utils/DBHelper';\nimport Map from '../utils/Map';\nimport loadGoogleMaps from '../utils/loadGoogleMaps';\n\n/**\n * Unfortunately we have to attach this function to the global scope.\n * This is a limitation of Google Maps.\n */\nself.initMap = () => {\n  IndexController.loadMap();\n};\n\n/**\n * Utility function to populate a select box with values.\n */\nconst populateSelectBox = (selectEl, values) => {\n  // Create a document fragment and option element\n  const docFrag = document.createDocumentFragment();\n  const optionEl = document.createElement('option');\n\n  // Add an option for each value\n  values.forEach(value => {\n    // Clone the option element\n    let option = optionEl.cloneNode();\n\n    // Set the textContent and value\n    option.textContent = value;\n    option.value = value;\n\n    // Append the option to the document fragment\n    docFrag.appendChild(option);\n  });\n\n  // Append the document fragment to the select box\n  selectEl.appendChild(docFrag);\n};\n\n/**\n * Generates the html for one restaurant list item.\n */\nconst createRestaurant = restaurant => {\n  // Create the necessary elements for later\n  const span = document.createElement('span');\n  const li = document.createElement('li');\n  const image = document.createElement('img');\n  const body = document.createElement('div');\n  const name = document.createElement('h2');\n  const neighborhood = span.cloneNode();\n  const address = document.createElement('address');\n  const more = document.createElement('a');\n  const avgReview = span.cloneNode();\n\n  // Setup the image\n  image.className = 'restaurant-item__image';\n  image.src = DBHelper.restaurantImgUrl(restaurant);\n  image.setAttribute('alt', restaurant.altText);\n\n  // Content body\n  body.className = 'restaurant-item__info';\n\n  // Restaurant title\n  name.textContent = restaurant.name;\n  name.className = 'restaurant-item__title';\n\n  // Restaurant neighborhood\n  neighborhood.textContent = restaurant.neighborhood;\n  neighborhood.className = 'restaurant-item__neighborhood';\n\n  // Restaurant address\n  address.className = 'restaurant-item___address';\n  address.textContent = restaurant.address;\n\n  // Average Review\n  avgReview.className = 'restaurant-item__review';\n  DBHelper.calculateAverageReview(restaurant.id).then(score => {\n    avgReview.textContent = score;\n    avgReview.setAttribute('aria-label', 'Average review');\n\n    // Append items to the content body\n    body.append(name);\n    body.append(neighborhood);\n    body.append(address);\n    name.append(avgReview);\n    body.append(more);\n  });\n\n  // View More button\n  more.textContent = 'Details';\n  more.href = DBHelper.restaurantUrl(restaurant);\n  more.title = `View additional details about ${restaurant.name}`;\n  more.className = 'restaurant-item__detail-link';\n\n  // Once the image has loaded, append all elements to the list item\n  image.onload = () => {\n    li.append(image);\n    li.append(body);\n  };\n\n  // Give the list item a class and return it\n  li.classList.add('restaurants-list__item');\n\n  return li;\n};\n\nconst IndexController = {\n  map: null,\n  restaurants: null,\n  pageElements: {\n    cuisineSelect: document.getElementById('cuisine'),\n    filterForm: document.querySelector('.filters'),\n    neighborhoodSelect: document.getElementById('neighborhood'),\n    restaurantsList: document.querySelector('.restaurants-list'),\n    restaurantResultCount: document.querySelector('.restaurant-count'),\n  },\n  \n  render() {\n    loadGoogleMaps();\n    \n    DBHelper.fetchRestaurants()\n      .then(restaurants => {\n        if (!restaurants) throw Error('Restaurants could not be displayed');\n\n        const { mobileButtonBar, filterForm } = this.pageElements;\n\n        // Save restaurants for later\n        this.restaurants = restaurants;\n\n        // Populate filters and display the restaurants\n        this.populateFilterForm();\n        this.populateRestaurantsList();\n\n        // Attach event listeners for the mobile view\n        filterForm.addEventListener('change', this.handleFilterUpdates.bind(this));\n      })\n      .catch(console.error);\n  },\n\n  populateFilterForm() {\n    const neighborhoods = [...new Set(this.restaurants.map(r => r.neighborhood))];\n    const cuisines = [...new Set(this.restaurants.map(r => r.cuisine_type))];\n    const { neighborhoodSelect, cuisineSelect } = this.pageElements;\n\n    populateSelectBox(neighborhoodSelect, neighborhoods);\n    populateSelectBox(cuisineSelect, cuisines);\n  },\n\n  handleFilterUpdates(event) {\n    const { neighborhoodSelect, cuisineSelect } = this.pageElements;\n    const neighborhood = neighborhoodSelect[neighborhoodSelect.selectedIndex].value;\n    const cuisine = cuisineSelect[cuisineSelect.selectedIndex].value;\n\n    DBHelper.fetchRestaurants()\n      .then(restaurants => {\n        if (!restaurants) throw Error('Restaurants could not be displayed');\n\n        restaurants = (cuisine !== 'all') ? \n          restaurants.filter(r => r.cuisine_type === cuisine) : \n          restaurants;\n        \n        restaurants = (neighborhood !== 'all') ?\n          restaurants.filter(r => r.neighborhood === neighborhood) :\n          restaurants;\n        \n        this.restaurants = restaurants;\n        this.populateRestaurantsList();\n      })\n      .catch(console.error);\n    \n    event.stopPropagation();\n  },\n\n  populateRestaurantsList() {\n    if (this.restaurants) {\n      const { restaurantsList, restaurantResultCount } = this.pageElements;\n      const docFrag = document.createDocumentFragment();\n      const rCount = this.restaurants.length;\n\n      this.restaurants.forEach(r => {\n        docFrag.appendChild(createRestaurant(r));\n      });\n\n      this.resetRestaurants();\n\n      restaurantsList.appendChild(docFrag);\n      restaurantResultCount.innerHTML = `\n        Displaying <span class=\"restaurant-count__text\">${rCount}</span> \n        restaurant${rCount === 1 ? '' : 's'}\n      `;\n\n      this.updateMap();\n    }\n  },\n\n  resetRestaurants() {\n    const { restaurantsList, restaurantResultCount } = this.pageElements;\n    restaurantsList.innerHTML = '';\n    restaurantResultCount.innerHTML = 'Displaying <span class=\"restaurant-count__text\">0</span> restaurants';\n  },\n\n  updateMap() {\n    if (!this.map) {\n      return;\n    }\n\n    const markers = this.restaurants.map(r => ({\n      position: r.latlng,\n      content: {\n        address: r.address,\n        cuisine: r.cuisine_type,\n        photo: DBHelper.restaurantImgUrl(r),\n        altText: r.altText,\n        title: r.name,\n        url: DBHelper.restaurantUrl(r),\n      }\n    }));\n\n    this.resetMap();\n    this.map.addMarkers(markers, this.handleMapMarkerClick);\n  },\n\n  handleMapMarkerClick(infoWindow, marker) {\n    const {\n      content: { \n        title, \n        photo, \n        altText,\n        address, \n        url \n      }\n    } = marker;\n  \n    // Set content of the info window\n    infoWindow.setContent(`\n      <div class=\"infoWindow\">\n        <img src=\"${photo}\" alt=\"${altText}\" class=\"infoWindow__image\">\n        <h2 class=\"infoWindow__title\">${title}</h2>\n        <address class=\"infoWindow__address\">${address}</address>\n        <a href=\"${url}\" title=\"View more information about ${title}\" class=\"infoWindow__link\">View Details</a>\n      </div>\n    `);\n  \n    // Open the info window\n    infoWindow.open(marker.map, marker);\n  },\n\n  loadMap() {\n    this.map = new Map(null, null, () => {\n      // Add a title to the map iframe\n      const mapFrame = document.querySelector('.map iframe');\n      mapFrame.title = \"Restaurant Locations\";\n    });\n    this.restaurants && this.updateMap();\n  },\n\n  resetMap() {\n    this.map && this.map.resetMarkers();\n  }\n};\n\nexport default IndexController;\n"],"sourceRoot":""}